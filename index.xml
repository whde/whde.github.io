<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whde</title>
    <link>https://whde.github.io/</link>
    <description>Recent content on Whde</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 May 2019 11:13:49 +0800</lastBuildDate>
    
	<atom:link href="https://whde.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CollectionView Animation</title>
      <link>https://whde.github.io/posts/collectionviewanimation/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/collectionviewanimation/</guid>
      <description> CollectionViewAnimation </description>
    </item>
    
    <item>
      <title>CollectionView Animation 1</title>
      <link>https://whde.github.io/posts/collectionviewanimation1/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/collectionviewanimation1/</guid>
      <description> CollectionViewAnimation1 </description>
    </item>
    
    <item>
      <title>CoreData 简单使用</title>
      <link>https://whde.github.io/posts/coredata/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/coredata/</guid>
      <description>CoreData 地址邮编, 用CoreData实现插入/删除/查询(包含结果排序,模糊查询)
github:https://github.com/whde/CoreData
创建工程,记得勾选使用CoreData
创建Entity
创建属性</description>
    </item>
    
    <item>
      <title>Extension通知栏小工具</title>
      <link>https://whde.github.io/posts/extension/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/extension/</guid>
      <description>Extension 通知栏小工具,更方便切换到设置 - GitHub:https://github.com/whde/Extension</description>
    </item>
    
    <item>
      <title>WhdeLocalized for iOS Localized</title>
      <link>https://whde.github.io/posts/whdelocalized/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/whdelocalized/</guid>
      <description>WhdeLocalized  针对国际化做的类,可以在应用程序中选择跟随系统,简体,繁体; 本程序添加有English,简体,繁体,想要做更多国际化语言,可以自己添加更多;  pod &#39;Language&#39;, &#39;~&amp;gt; 1.0.4&#39;  文字国际化  1.生成 Localizable.strings, 添加对应的语言文件 2.使用 CLocalizedString(@&amp;ldquo;确认设置&amp;rdquo;) 例如:
titleLabel.text = CLocalizedString(@&amp;quot;管理地址&amp;quot;);  xib国际化 xib使用的时候需要读取到对应语言文件夹下的nib,当我们设置语言不跟随系统的时候,系统不能正确读取; 因此,我们需要找到对应的nib - 1.对xib进行国际化,正常流程 - 2.在使用xib的时候使用 CLocalizedNibName(@&amp;ldquo;AddViewController&amp;rdquo;) 例如:
AddViewController *addVC = [[AddViewController alloc] initWithNibName:CLocalizedNibName(@&amp;quot;AddViewController&amp;quot;) bundle:nil];   图片国际化 和文字国际化类似,我们只需要找到国际化对应的是什么图片 - 1.生成 ImageLocalized.strings, 添加对应的语言文件 - 2.将图片添加到Project, 将ImageLocalized.strings中同一个Key在不同语言文件中对应到不同的语言图片 - 3.使用CLocalizedImgName(图片名称Key) 例如:
[UIImage imageNamed:CLocalizedImgName(@&amp;quot;djdzs_大家都在说.png&amp;quot;)]  设置语言  1.将所有的ViewController继承于一个BaseViewController 2.在viewDidLoad方法下添加:
[[NSNotificationCenter defaultCenter] removeObserver:self name:LANGUAGE_CHANGE_NOTIFICATION object:nil]; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(languageHasChanged) name:LANGUAGE_CHANGE_NOTIFICATION object:nil];   3.</description>
    </item>
    
    <item>
      <title>WhdeVersion iOS软件检查更新</title>
      <link>https://whde.github.io/posts/version/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/version/</guid>
      <description> Version 1.0.2 iOS软件检查更新,每次启动检测Appstore是否有更新,每一次更新只提醒一次 - 无需填写AppStoreID即可查询 - 一句话简单整合版本更新 - 添加了https://github.com/whde/Alert 的Framework, 无需改动即可使用Alert弹出框提示
pod &#39;WhdeVersion&#39;, &#39;~&amp;gt; 1.0.2&#39;  使用:  将Version文件夹导入到项目中 导入头文件
#import &amp;quot;VersionManage.h&amp;quot;   写入代码 objective-c [VersionManage checkVerSion];    #PS: AlertView推荐使用https://github.com/whde/Alert
pod &#39;Alert&#39;, &#39;~&amp;gt; 1.0.3&#39;   这个Alert兼容iOS7以上 支持居左/居中/居右对齐 同时支持设置行间距 使用方式和UIAlertView一样 Alert同时还支持Block形式 支持横竖屏切换    </description>
    </item>
    
    <item>
      <title>WhdeViewPager, 类似安卓的ViewPager</title>
      <link>https://whde.github.io/posts/whdeviewpager/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/whdeviewpager/</guid>
      <description>WhdeViewPager 类似安卓的 ViewPager (Android ViewPager)，效果如下 使用 viewPager_ = [[WhdeViewPager alloc] initWithFrame:CGRectMake(0, 0, 320, 568)]; UIView *view1 = [[UIView alloc] init]; view1.backgroundColor = [UIColor lightGrayColor]; UIView *view2 = [[UIView alloc] init]; view2.backgroundColor = [UIColor whiteColor]; UIView *view3 = [[UIView alloc] init]; view3.backgroundColor = [UIColor yellowColor]; UIView *view4 = [[UIView alloc] init]; view4.backgroundColor = [UIColor grayColor]; UIView *view5 = [[UIView alloc] init]; view5.backgroundColor = [UIColor magentaColor]; [viewPager_ setItemsView:@[view1, view2, view3, view4, view5] withTitle:@[@&amp;quot;第一页面&amp;quot;, @&amp;quot;第二页面&amp;quot;, @&amp;quot;第三页面&amp;quot;, @&amp;quot;第四页面&amp;quot;, @&amp;quot;第五页面&amp;quot;]]; [self.</description>
    </item>
    
    <item>
      <title>根据系统API, 封装二维码扫描(QRCode)</title>
      <link>https://whde.github.io/posts/qrcode/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/qrcode/</guid>
      <description>QRCode 根据系统API, 封装二维码扫描
 1.link AVFoundation.framework
 2.#import 
 3.拷贝以下代码 ```objective-c /*!
 扫一扫 */  (void)intoQRCodeVC { NSString *mediaType = AVMediaTypeVideo; AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:mediaType]; if(authStatus == AVAuthorizationStatusDenied){ if (IS_VAILABLE_IOS8) { UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&amp;ldquo;相机权限受限&amp;rdquo; message:@&amp;ldquo;请在iPhone的\&amp;ldquo;设置-&amp;gt;隐私-&amp;gt;相机\&amp;ldquo;选项中,允许\&amp;ldquo;自游邦\&amp;ldquo;访问您的相机.&amp;rdquo; preferredStyle:UIAlertControllerStyleAlert]; [alert addAction:[UIAlertAction actionWithTitle:@&amp;ldquo;好&amp;rdquo; style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) { }]]; [alert addAction:[UIAlertAction actionWithTitle:@&amp;ldquo;去设置&amp;rdquo; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) { if ([self canOpenSystemSettingView]) { [self systemSettingView]; } }]]; [self presentViewController:alert animated:YES completion:nil]; } else { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&amp;ldquo;相机权限受限&amp;rdquo; message:@&amp;ldquo;请在iPhone的\&amp;ldquo;设置-&amp;gt;隐私-&amp;gt;相机\&amp;ldquo;选项中,允许\&amp;ldquo;自游邦\&amp;ldquo;访问您的相机.</description>
    </item>
    
    <item>
      <title>iOS 表格 WhdeForm</title>
      <link>https://whde.github.io/posts/form/</link>
      <pubDate>Mon, 27 May 2019 19:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/form/</guid>
      <description>WhdeForm iOS 表格
pod &#39;WhdeForm&#39;, &#39;~&amp;gt; 1.0.0&#39;   添加了Reusable机制 添加了横（Section）表头 添加了竖（Column）表头 添加了左上角（TopLeftHeader）总表头 通过FDateSource去创建各个元素，类似TableView 添加了FIndexPath,{section, column} 表头添加点击事件 添加了网格   使用 #import &amp;quot;ViewController.h&amp;quot; #import &amp;quot;FormScrollView.h&amp;quot; @interface ViewController ()&amp;lt;FDelegate, FDataSource&amp;gt; { NSArray *_data; } @end @implementation ViewController - (void)viewDidLoad { [super viewDidLoad]; self.edgesForExtendedLayout = UIRectEdgeNone; self.view.autoresizingMask = UIViewAutoresizingNone; FormScrollView *table = [[FormScrollView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height-64)]; table.contentInset = UIEdgeInsetsMake(0, 0, 0, 0); table.fDelegate = self; table.fDataSource = self; [self.view addSubview:table]; _data = [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&amp;quot;datas&amp;quot; ofType:@&amp;quot;plist&amp;quot;]]; [table reloadData]; } - (FTopLeftHeaderView *)topLeftHeadViewForForm:(FormScrollView *)formScrollView { FTopLeftHeaderView *view = [formScrollView dequeueReusableTopLeftView]; if (view == NULL) { view = [[FTopLeftHeaderView alloc] initWithSectionTitle:@&amp;quot;行数&amp;quot; columnTitle:@&amp;quot;列数&amp;quot;]; } return view; } - (NSInteger)numberOfSection:(FormScrollView *)formScrollView { return _data.</description>
    </item>
    
    <item>
      <title>TextAttachment图文AttributeString</title>
      <link>https://whde.github.io/posts/textattachment/</link>
      <pubDate>Mon, 27 May 2019 16:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/textattachment/</guid>
      <description> TextAttachment 项目介绍 - (void)viewDidLoad { [super viewDidLoad]; NSTextAttachment *textAttachment = [[NSTextAttachment alloc] init]; UIImage *image = [UIImage imageNamed:@&amp;quot;s.png&amp;quot;]; textAttachment.image = image; textAttachment.bounds = CGRectMake(0, 0, image.size.width/image.scale, image.size.height/image.scale); NSMutableAttributedString *attri = [[NSMutableAttributedString alloc] initWithString:@&amp;quot;梅西去了伊比萨高端夜店lio Ibiza。结果在夜店中，梅西偶遇纳达尔。按照TyC电视台的说法，梅西和纳达尔进行了“简单但友好”的对话，并且进行了合影。尽管纳达尔是皇马死忠球迷，但他和梅西仍然惺惺相惜。&amp;quot; attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:40]}]; [attri appendAttributedString:[NSAttributedString attributedStringWithAttachment:textAttachment]]; UILabel *label = [[UILabel alloc] initWithFrame:self.view.bounds]; label.numberOfLines = 0; label.attributedText = attri; [self.view addSubview:label]; }  </description>
    </item>
    
    <item>
      <title>断点下载Swift</title>
      <link>https://whde.github.io/posts/resumefrombreakpoint/</link>
      <pubDate>Mon, 27 May 2019 15:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/resumefrombreakpoint/</guid>
      <description>ResumeFromBreakPoint Swift实现断点续传,Demo简单易懂,没有太多复杂模块和逻辑,完整体现断点续传的原理 https://github.com/whde/BreakPoint 为对应的Objective-C版本
/*Objective-C*/ pod &#39;BreakPoint&#39;, &#39;~&amp;gt; 1.0.1&#39;  WhdeBreakPoint 简单的网络请求队列管理类,简单的管理,不做太多复杂处理
/*创建请求,添加请求到数组中 WhdeSession请求失败,取消请求等需要从数组中移除*/ static func asynDownload(urlStr:NSString, progress:@escaping ProgressBlock, success:@escaping SuccessBlock, failure:@escaping FailureBlock) -&amp;gt;WhdeSession  /*取消请求,移除数组中对应的请求*/ static func cancel(urlStr:String)  /*暂停,即为取消请求*/ static func pause(urlStr:String)  WhdeFileManager 断点续传专用的文件管理
/*根据NSURL获取存储的路径,文件不一定存在 文件名为Url base64转换*/ static func filePath(url:NSURL) -&amp;gt; String  /*获取对应文件的大小*/ static func fileSize(url:NSURL) -&amp;gt; UInt64  /*根据url删除对应的文件*/ static func deleteFile(url:NSURL) -&amp;gt;Bool  WhdeSession 网络收发
/*创建请求,开始下载,设置已经下载的位置*/ func asynDownload(urlStr:NSString, progress:@escaping ProgressBlock, success:@escaping SuccessBlock, failure:@escaping FailureBlock, callCancel:@escaping CallCancel) -&amp;gt;WhdeSession  /*取消下载*/ func cancel() -&amp;gt; Void  /*暂停下载即为取消下载*/ func pause() -&amp;gt; Void  /*出现错误,取消请求,通知失败*/ internal func urlSession(_ session: URLSession, didBecomeInvalidWithError error: Error?</description>
    </item>
    
    <item>
      <title>Lead VPN App for iOS</title>
      <link>https://whde.github.io/posts/lead-ios/</link>
      <pubDate>Mon, 27 May 2019 13:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/lead-ios/</guid>
      <description>Lead   - a featherweight iOS proxy client with interactive UI.
Lead is currently compatible with Shadowsocks.
For more information, see the demo vedio URL.
Todo List Other avaliable proxy types: HTTP HTTPS ShadowsocksR   Usage This project needs an Apple developer account and must be run on a physical device.
 In Terminal,
cd ~/your project path/ pod install carthage update --no-use-binaries --platform ios  In Xcode,</description>
    </item>
    
    <item>
      <title>WhdeAlert</title>
      <link>https://whde.github.io/posts/alert/</link>
      <pubDate>Mon, 27 May 2019 12:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/alert/</guid>
      <description> Alert 消息提醒视图,在Xcode7 ，iOS9.0的SDK中，已经明确提示不再推荐使用UIAlertView，而只能使用UIAlertController; 而系统的样式不能够满足大多UI的需求,因此自定义一个类似UIAlertView; 使用: pod &#39;Alert&#39;, &#39;~&amp;gt; 1.0.4&#39;   5.导入头文件
#import &amp;quot;Alert.h&amp;quot;   6.使用:  Alert *alert = [[Alert alloc] initWithTitle:CLocalizedString(@&amp;quot;输入口令&amp;quot;) message:nil delegate:nil cancelButtonTitle:CLocalizedString(@&amp;quot;取消&amp;quot;) otherButtonTitles:CLocalizedString(@&amp;quot;进入&amp;quot;), nil]; alert.alertStyle = AlertStylePlainTextInput; __block Alert*alertV = alert; [alert setClickBlock:^(Alert *alertView, NSInteger buttonIndex) { if (buttonIndex == 1) { NSLog(@&amp;quot;%@&amp;quot;, alertV.textField.text); } }]; [alert setCancelBlock:^(Alert *alertView) { // 取消 }]; [alert show];   </description>
    </item>
    
    <item>
      <title>iOS消息推送测试</title>
      <link>https://whde.github.io/posts/psuh/</link>
      <pubDate>Mon, 27 May 2019 10:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/psuh/</guid>
      <description> iOS消息推送测试 iOS消息推送测试，Mac App 操作界面，再也不用担心和后台那个坑调试了
- Mac App - iOS推送测试 - 选择推送证书（下载下来的.cer文件） - 填写获取到手机的Device Token - 填写推送的内容 - 点击发送 </description>
    </item>
    
    <item>
      <title>LameFramework 转Mp3</title>
      <link>https://whde.github.io/posts/lame/</link>
      <pubDate>Sun, 26 May 2019 14:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/lame/</guid>
      <description>LameFrameworksh 最新的 iOS 端 Lame生成Framework. 音频转换, Mp3
pod &amp;lsquo;WhdeLame&amp;rsquo;</description>
    </item>
    
    <item>
      <title>ResumeFromBreakPoint断点下载</title>
      <link>https://whde.github.io/posts/breakpoint/</link>
      <pubDate>Sun, 26 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/breakpoint/</guid>
      <description>BreakPoint Objective-C实现断点续传,Demo简单易懂,没有太多复杂模块和逻辑,完整体现断点续传的原理 https://github.com/whde/ResumeFromBreakPoint 为对应的Swift断点续传
WhdeBreakPoint 简单的网络请求队列管理类,简单的管理,不做太多复杂处理
/*创建请求,添加请求到数组中 WhdeSession请求失败,取消请求等需要从数组中移除*/ + (WhdeSession *)asynDownloadWithUrl:(NSString *)urlStr progressBlock:(ProgressBlock)progress successBlock:(SuccessBlock) success failureBlock:(FailureBlock)failure;  /*取消请求,移除数组中对应的请求*/ + (void)cancel:(NSString *)urlStr;  /*暂停,即为取消请求*/ + (void)pause:(NSString *)urlStr;  WhdeFileManager 断点续传专用的文件管理
/*根据NSURL获取存储的路径,文件不一定存在 文件名为Url base64转换*/ + (NSString *)filePath:(NSURL *)url;  /*获取对应文件的大小*/ + (long long)fileSize:(NSURL *)url;  /*根据url删除对应的文件*/ + (BOOL)deleteFile:(NSURL *)url;  WhdeSession 网络收发
/*创建请求,开始下载,设置已经下载的位置*/ + (instancetype)asynDownloadWithUrl:(NSString *)urlStr progressBlock:(ProgressBlock)progress successBlock:(SuccessBlock) success failureBlock:(FailureBlock)failure callCancelBlock:(CallCancel)callCancel;  /*取消下载*/ - (void)cancel;  /*暂停下载即为取消下载*/ - (void)pause;  /*出现错误,取消请求,通知失败*/ - (void)URLSession:(NSURLSession *)session didBecomeInvalidWithError:(NSError *)error;  /*下载完成*/ - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error;  /*接收到数据,将数据存储*/ - (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data { NSHTTPURLResponse *response = (NSHTTPURLResponse *)dataTask.</description>
    </item>
    
    <item>
      <title>Xcode模拟器卸载</title>
      <link>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%8D%B8%E8%BD%BD/</link>
      <pubDate>Sat, 25 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%8D%B8%E8%BD%BD/</guid>
      <description> Xcode模拟器卸载 卸载 模拟器存放在这个文件夹下
/Library/Developer/CoreSimulator/Profiles/Runtimes/  如图：
我们这次删除iOS8.1，直接在Finder（访达）将文件删除 然后重启Xcode，就可以看到效果了 </description>
    </item>
    
    <item>
      <title>Xcode模拟器安装包安装</title>
      <link>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 25 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85/</guid>
      <description>Xcode模拟器安装包安装 安装（本文以Xcode10.1版本操作）
首先我们先进入Xcode下载文件夹
~/Library/Caches/com.apple.dt.Xcode # 右键-&amp;gt;显示包内容-&amp;gt;Downloads(如果没有Downloads目录, 则手动创建一个)  将我们下载好的模拟器安装包copy到这个Downloads目录，如图：
然后我们回到Xcode操作
点击下载对应的版本，这期间会跳过下载直接去安装
不到一会就安装成功了，如图：</description>
    </item>
    
    <item>
      <title>创建一个类似CocoaPods的Spec</title>
      <link>https://whde.github.io/posts/whdespecs/</link>
      <pubDate>Sat, 25 May 2019 11:12:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/whdespecs/</guid>
      <description> WhdeSpecs 创建一个类似CocoaPods的Spec Repo，然后将自己的组件放到上面，使用CocoaPods就可以帮我们集成这些组件, 本次将Specs放在Gitee上
 ##### 创建自己的Specs  去Gitee上创建一个项目，命名为：WhdeSpecs
cd ~/.cocoapods/repos  进入文件夹
pod repo add WhdeSpecs https://gitee.com/Whde/WhdeSpecs.git  成功之后终端显示
Cloning spec repo &#39;WhdeSpecs&#39; from &#39;https://gitee.com/Whde/WhdeSpecs.git&#39;   按照链接中如何创建发布自己的库介绍配置去配置项目和WhdeVersion.podspec 接下来就是如何提交到我们对应的地方，先进入组件文件夹，执行下面语句  pod repo push WhdeSpecs WhdeVersion.podspec git push origin :refs/tags/2.0.0   ##### 成功之后回到~/.cocoapods/repos文件夹，查看是否已经有   ##### 使用  source &#39;https://gitee.com/Whde/WhdeSpecs.git&#39; platform :ios, &#39;8.0&#39; inhibit_all_warnings! use_frameworks! target &#39;Demo&#39; do pod &#39;WhdeVersion&#39; end  </description>
    </item>
    
    <item>
      <title>获取iOS 设备的 UDID</title>
      <link>https://whde.github.io/posts/udid/</link>
      <pubDate>Sat, 25 May 2019 11:11:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/udid/</guid>
      <description>iOS 设备的 UDID 什么是 UDID？ UDID 是由子母和数字组成的 40 个字符串的序号，用来区别每一个唯一的 iOS 设备，包括 iPhones, iPads, 以及 iPod Touches，这些编码看起来是随机的，实际上是跟硬件设备特点相联系的。
如何获取 iOS 设备 UDID？
在 iOS 设备上打开下面的地址，即可方便的获取到当前设备的 UDID。
https://www.pgyer.com/udid
注意：请根据网页的提示，安装蒲公英提供的描述文件。如果手机设置了锁屏密码，则需要根据提示输入锁屏密码。
复制UDID，给开发工程师
PS： ​ 这个过程安装了一个蒲公英的描述文件，在拿到UDID之后，我们可以在手机上删掉它，描述文件路径： ​ 设置-&amp;gt;通用-&amp;gt;描述文件-&amp;gt;蒲公英</description>
    </item>
    
    <item>
      <title>Mac Maven 安装</title>
      <link>https://whde.github.io/posts/mac-maven-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 25 May 2019 11:10:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/mac-maven-%E5%AE%89%E8%A3%85/</guid>
      <description>Mac Maven 安装 下载地址：http://maven.apache.org/download.cgi
选择这个版本下载：
下载已经存放到Downloads文件夹，先进入Downloads文件夹
cd Downloads  解压：
tar -xvf apache-maven-3.5.4-bin.tar.gz  复制到对应文件下：
sudo mv -f apache-maven-3..5.4 /usr/local/  编辑 /etc/profile 文件：
cd ~ sudo vim /etc/profile  在/etc/profile文件末尾添加如下代码，然后保存文件
export MAVEN_HOME=/usr/local/apache-maven-3.5.4 export PATH=${PATH}:${MAVEN_HOME}/bin  并运行如下命令使环境变量生效：
source /etc/profile  查看是否生效，输入：
mvn -v  显示如下信息，则说明 Maven 已经安装成功：
Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00) Maven home: /usr/local/apache-maven-3.5.4 Java version: 11.0.1, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home Default locale: zh_CN_#Hans, platform encoding: UTF-8 OS name: &amp;quot;mac os x&amp;quot;, version: &amp;quot;10.</description>
    </item>
    
    <item>
      <title>笑话服务端，配和JokeMysql使用</title>
      <link>https://whde.github.io/posts/jokeserver/</link>
      <pubDate>Sat, 25 May 2019 11:09:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/jokeserver/</guid>
      <description>JokeServer 笑话服务端，配和JokeMysql使用
github地址</description>
    </item>
    
    <item>
      <title>爬取笑话网站数据，存储到MySQL数据库</title>
      <link>https://whde.github.io/posts/jokemysql/</link>
      <pubDate>Sat, 25 May 2019 11:08:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/jokemysql/</guid>
      <description>爬取笑话网站数据，存储到MySQL数据库 怎么爬取数据在Python爬取笑话数据中有详细说明
本文基于这篇文章进行，将数据存储到MySQL
首先要连接MySQL，需要引入 pymysql
import pymysql  接着连接MySQL，并创建我们的table，db=joke需要事先创建好
def connectdb(): db1 = pymysql.connect( host=&amp;quot;localhost&amp;quot;, user=&amp;quot;root&amp;quot;, passwd=&amp;quot;666666&amp;quot;, port=3306, db=&amp;quot;joke&amp;quot;) cursor = db1.cursor() cursor.execute(&amp;quot;DROP TABLE IF EXISTS joke&amp;quot;) sql = &amp;quot;&amp;quot;&amp;quot;CREATE TABLE joke (herf TEXT NOT NULL, title TEXT, date TEXT, detail TEXT)&amp;quot;&amp;quot;&amp;quot; try: cursor.execute(sql) cursor.execute(&amp;quot;&amp;quot;&amp;quot;SET SQL_SAFE_UPDATES = 0;&amp;quot;&amp;quot;&amp;quot;) pass except Exception as e: print(str(e)) pass return db1  接下来就是这么存到数据库中，我们存储连接(herf)，标题(title)，发布时间(date)，详情(detail)。如果存储失败，我们需要回滚操作
def insetdb(db1, herf, title, date, detail): sql = &amp;quot;insert into joke(herf, title, date, detail) \ values (&#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;);&amp;quot; % \ (herf, title, date, detail) try: cursor = db1.</description>
    </item>
    
    <item>
      <title>Python爬取笑话</title>
      <link>https://whde.github.io/posts/joke/</link>
      <pubDate>Sat, 25 May 2019 11:04:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/joke/</guid>
      <description>Python爬取笑话 Python爬取笑话排行，将数据以json存储到文件中
我们爬取的地址是：http://www.jokeji.cn/hot.asp?action=brow
分析一下，我们需要爬取总页数，然后读取每页下面的笑话，笑话内容需要去详情页去爬取
1、首先我们创建一个程序入口  我们创建一个文件夹，文件夹里最后存数据文件进去 spider(root_url) 方法开始爬取数据，这个方法我们自己实现  # 程序入口 if __name__ == &amp;quot;__main__&amp;quot;: # 创建文件夹，最后存数据到这个文件夹下面 importlib.reload(sys) if os.path.isdir(root_folder): pass else: os.mkdir(root_folder) # 开始爬取数据 spider(root_url) print(&#39;**** spider ****&#39;)  2、开始爬取数据spider(root_url)  先去getpages(url)获取页数pages，后面会讲到 page(pageurl)获取每页里面数据 数据爬完，存储到data.json文件中  # 开始爬取数据 def spider(url): list1 = [] i = 1 # 去获取排行榜的页数 pages = getpages(url) while i &amp;lt;= int(pages): # 拼接每一页的URL地址 pageurl = &#39;http://www.jokeji.cn/hot.asp?action=brow&amp;amp;me_page=&#39;+str(i) print(pageurl) # 获取每页下面的内容 list1 = list1+page(pageurl) i = i+1 pass else: print(&#39;大于页数&#39;) # 将list存储到data.</description>
    </item>
    
    <item>
      <title>Python爬取笑话的Android软件</title>
      <link>https://whde.github.io/posts/jokeandroid/</link>
      <pubDate>Sat, 25 May 2019 11:04:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/jokeandroid/</guid>
      <description> JokeAndroid github地址
对应的服务器
使用了Okhttp网络模块
fastjson解析
implementation &#39;com.squareup.okhttp3:okhttp:3.11.0&#39; implementation group: &#39;com.alibaba&#39;, name: &#39;fastjson&#39;, version: &#39;1.2.51&#39;  JokeSwipeRefreshLayout实现了上下拉加载
效果图如下：
 </description>
    </item>
    
    <item>
      <title>iOS代码统计</title>
      <link>https://whde.github.io/posts/ios%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1/</link>
      <pubDate>Sat, 25 May 2019 11:03:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/ios%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1/</guid>
      <description> iOS代码统计（空行、注释、代码） 下载工具 工具cloc地址：https://github.com/AlDanial/cloc 先去下载Release下最新版本
执行下面脚本： # 脚本解释： # /Users/Whde/Downloads/cloc-1.80/cloc 为下载的Cloc工具的路径 # /Users/Whde/Documents/Demo-IOS/trunk/Demo为项目的路径 perl /Users/Whde/Downloads/cloc-1.80/cloc /Users/Whde/Documents/Demo-IOS/trunk/Demo  得到结果如下： ➜ Demo perl /Users/Whde/Downloads/cloc-1.80/cloc /Users/Whde/Documents/Demo-IOS/trunk/Demo 1537 text files. 1507 unique files. 183 files ignored. github.com/AlDanial/cloc v 1.80 T=3.29 s (412.2 files/s, 41728.3 lines/s) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Objective C 529 12616 8624 58317 C++ 62 2015 1287 13696 C/C++ Header 621 6308 15081 10894 JSON 111 0 0 2517 Markdown 14 682 0 2142 Objective C++ 3 148 28 787 Bourne Shell 8 172 286 769 C 2 46 19 561 HTML 1 8 0 62 D 2 0 0 9 JavaScript 1 0 5 2 ------------------------------------------------------------------------------- SUM: 1354 21995 25330 89756 -------------------------------------------------------------------------------  </description>
    </item>
    
    <item>
      <title>删除Mac自己装的Python</title>
      <link>https://whde.github.io/posts/%E5%88%A0%E9%99%A4mac%E8%87%AA%E5%B7%B1%E8%A3%85%E7%9A%84python/</link>
      <pubDate>Sat, 25 May 2019 11:01:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/%E5%88%A0%E9%99%A4mac%E8%87%AA%E5%B7%B1%E8%A3%85%E7%9A%84python/</guid>
      <description>删除Mac自己装的Python，保留系统自带版本
// 删除框架 sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.7 // 删除应用目录 sudo rm -rf &#39;/Applications/Python 3.7&#39; // 删除指向python的链接 cd /usr/local/bin/ ls -l /usr/local/bin | grep &#39;../Library/Frameworks/Python.framework/Versions/x.x&#39; | awk &#39;{print $9}&#39; | tr -d @ | xargs rm  </description>
    </item>
    
    <item>
      <title>Cocoapods安装发布自己库</title>
      <link>https://whde.github.io/posts/cocoapods/</link>
      <pubDate>Sat, 25 May 2019 10:59:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/cocoapods/</guid>
      <description>这里不啰嗦Cocoapods有什么用,直接上如何使用,关于有什么用,相信各大搜索引擎比我解释更全面;
Cocoapods安装 1.Mac终端输入 sudo gem install cocoapods  2.输入电脑密码即可开始安装,等待&amp;hellip;界面出现 示例图片 3.继续终端输入 pod setup  等待界面出现 安装成功 4.终端输入以下代码,查看版本号 --version  写自己的库 1.写完代码, 将自己的库上传到github,要生成一个Release版本 进入Release仓库 创建新Release版本 填写信息,发布Release版本 版本信息 接下来就看怎么将这个Release版本弄到Cocoapods上.
2.创建.podspec文件 终端cd到项目文件夹下 文件结构 我的项目就cd到WhdeLocalized文件夹下 终端输入代码创建.podspec文件,代码中Language对应项目名
pod spec create Language  用Xcode打开这个Language.podspec文件, 填写以下代码:
Pod::Spec.new do |s| s.name = &amp;quot;Language&amp;quot; s.version = &amp;quot;1.0.4&amp;quot; s.summary = &amp;quot;iOS Language.&amp;quot; s.homepage = &amp;quot;https://github.com/whde/WhdeLocalized&amp;quot; s.license = &#39;MIT&#39; s.author = { &amp;quot;Whde&amp;quot; =&amp;gt; &amp;quot;460290973@qq.com&amp;quot; } s.platform = :ios, &amp;quot;7.0&amp;quot; s.</description>
    </item>
    
    <item>
      <title>获取Xcode模拟器下载地址</title>
      <link>https://whde.github.io/posts/%E8%8E%B7%E5%8F%96xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Sat, 25 May 2019 10:43:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/%E8%8E%B7%E5%8F%96xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</guid>
      <description> 获取Xcode模拟器下载地址 终端操作，期间需要输入电脑密码 sudo /Applications/Xcode.app/Contents/MacOS/Xcode  然后会自动打开Xcode，然后在Xcode里点击下载对应的模拟器，例如我下载iOS12（如图） 如上图那样，我们接着点击右边的x停止下载 接着我们回到终端，就会显示出模拟器的地址（如图） </description>
    </item>
    
    <item>
      <title>Mac Python 安装安装</title>
      <link>https://whde.github.io/posts/python%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 25 May 2019 10:36:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/python%E5%AE%89%E8%A3%85/</guid>
      <description> Mac安装Python 操作基于macOS Mojave(10.14.1)
Mac自带有Python2.7版本, 我们安装3.7版本，两个版本可以共存，下载地址：
https://www.python.org/downloads/release/python-371/  常规安装
安装完成后会跳出安装好的程序路径
安装位置在这
/Library/Frameworks/Python.framework/Versions/3.7  也可以终端查看是否安装成功，终端输入Python3
python3  </description>
    </item>
    
    <item>
      <title>ProgressView,波浪进度</title>
      <link>https://whde.github.io/posts/progressview/</link>
      <pubDate>Thu, 14 Dec 2017 11:18:15 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/progressview/</guid>
      <description> ProgressView </description>
    </item>
    
    <item>
      <title>iOS脚本打包</title>
      <link>https://whde.github.io/posts/package/</link>
      <pubDate>Thu, 14 Dec 2017 11:18:15 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/package/</guid>
      <description>iOS脚本打包 使用方法  项目主目录下创建 Package 文件夹, 将Package_test.sh DevelopmentExportOptionsPlist.plist放进文件下
 打开Package_test.sh文件,修改 &amp;ldquo;项目自定义部分&amp;rdquo; 配置好项目参数
 打开DevelopmentExportOptionsPlist.plist, 配置provisioningProfiles字段
 打开终端, cd到Package文件夹
 输入 sh Package_test.sh 命令,回车,开始执行此打包脚本
  DevelopmentExportOptionsPlist.plist 文件下载地址：DevelopmentExportOptionsPlist.plist
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;compileBitcode&amp;lt;/key&amp;gt; &amp;lt;false/&amp;gt; &amp;lt;key&amp;gt;method&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;development&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;provisioningProfiles&amp;lt;/key&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;com.Whde.WhdeProjectName&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;Wildcard&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;key&amp;gt;signingCertificate&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;iPhone Developer&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;signingStyle&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;manual&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;stripSwiftSymbols&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;teamID&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;BVU65MZFLK&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;thinning&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;&amp;amp;lt;none&amp;amp;gt;&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt;  Package_test.sh 文件下载地址：Package_test.sh
# !/bin/bash # 使用方法: # 1 : 项目主目录下创建 Package 文件夹, 将Package_test.</description>
    </item>
    
  </channel>
</rss>