<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on Whde</title>
    <link>https://whde.github.io/tags/ios/</link>
    <description>Recent content in iOS on Whde</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 May 2019 11:13:49 +0800</lastBuildDate>
    
	<atom:link href="https://whde.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CollectionView Animation</title>
      <link>https://whde.github.io/posts/collectionviewanimation/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/collectionviewanimation/</guid>
      <description> CollectionViewAnimation </description>
    </item>
    
    <item>
      <title>CollectionView Animation 1</title>
      <link>https://whde.github.io/posts/collectionviewanimation1/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/collectionviewanimation1/</guid>
      <description> CollectionViewAnimation1 </description>
    </item>
    
    <item>
      <title>CoreData 简单使用</title>
      <link>https://whde.github.io/posts/coredata/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/coredata/</guid>
      <description>CoreData 地址邮编, 用CoreData实现插入/删除/查询(包含结果排序,模糊查询) - github:https://github.com/whde/CoreData</description>
    </item>
    
    <item>
      <title>Extension通知栏小工具</title>
      <link>https://whde.github.io/posts/extension/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/extension/</guid>
      <description>Extension 通知栏小工具,更方便切换到设置 - GitHub:https://github.com/whde/Extension</description>
    </item>
    
    <item>
      <title>WhdeLocalized for iOS Localized</title>
      <link>https://whde.github.io/posts/whdelocalized/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/whdelocalized/</guid>
      <description>WhdeLocalized  针对国际化做的类,可以在应用程序中选择跟随系统,简体,繁体; 本程序添加有English,简体,繁体,想要做更多国际化语言,可以自己添加更多;  pod &#39;Language&#39;, &#39;~&amp;gt; 1.0.4&#39;  文字国际化  1.生成 Localizable.strings, 添加对应的语言文件 2.使用 CLocalizedString(@&amp;ldquo;确认设置&amp;rdquo;) 例如:
titleLabel.text = CLocalizedString(@&amp;quot;管理地址&amp;quot;);  xib国际化 xib使用的时候需要读取到对应语言文件夹下的nib,当我们设置语言不跟随系统的时候,系统不能正确读取; 因此,我们需要找到对应的nib - 1.对xib进行国际化,正常流程 - 2.在使用xib的时候使用 CLocalizedNibName(@&amp;ldquo;AddViewController&amp;rdquo;) 例如:
AddViewController *addVC = [[AddViewController alloc] initWithNibName:CLocalizedNibName(@&amp;quot;AddViewController&amp;quot;) bundle:nil];   图片国际化 和文字国际化类似,我们只需要找到国际化对应的是什么图片 - 1.生成 ImageLocalized.strings, 添加对应的语言文件 - 2.将图片添加到Project, 将ImageLocalized.strings中同一个Key在不同语言文件中对应到不同的语言图片 - 3.使用CLocalizedImgName(图片名称Key) 例如:
[UIImage imageNamed:CLocalizedImgName(@&amp;quot;djdzs_大家都在说.png&amp;quot;)]  设置语言  1.将所有的ViewController继承于一个BaseViewController 2.在viewDidLoad方法下添加:
[[NSNotificationCenter defaultCenter] removeObserver:self name:LANGUAGE_CHANGE_NOTIFICATION object:nil]; [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(languageHasChanged) name:LANGUAGE_CHANGE_NOTIFICATION object:nil];   3.</description>
    </item>
    
    <item>
      <title>WhdeVersion iOS软件检查更新</title>
      <link>https://whde.github.io/posts/version/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/version/</guid>
      <description> Version 1.0.2 iOS软件检查更新,每次启动检测Appstore是否有更新,每一次更新只提醒一次 - 无需填写AppStoreID即可查询 - 一句话简单整合版本更新 - 添加了https://github.com/whde/Alert 的Framework, 无需改动即可使用Alert弹出框提示
pod &#39;WhdeVersion&#39;, &#39;~&amp;gt; 1.0.2&#39;  使用:  将Version文件夹导入到项目中 导入头文件
#import &amp;quot;VersionManage.h&amp;quot;   写入代码 objective-c [VersionManage checkVerSion];    #PS: AlertView推荐使用https://github.com/whde/Alert
pod &#39;Alert&#39;, &#39;~&amp;gt; 1.0.3&#39;   这个Alert兼容iOS7以上 支持居左/居中/居右对齐 同时支持设置行间距 使用方式和UIAlertView一样 Alert同时还支持Block形式 支持横竖屏切换    </description>
    </item>
    
    <item>
      <title>WhdeViewPager, 类似安卓的ViewPager</title>
      <link>https://whde.github.io/posts/whdeviewpager/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/whdeviewpager/</guid>
      <description>WhdeViewPager 类似安卓的 ViewPager (Android ViewPager)，效果如下 使用 viewPager_ = [[WhdeViewPager alloc] initWithFrame:CGRectMake(0, 0, 320, 568)]; UIView *view1 = [[UIView alloc] init]; view1.backgroundColor = [UIColor lightGrayColor]; UIView *view2 = [[UIView alloc] init]; view2.backgroundColor = [UIColor whiteColor]; UIView *view3 = [[UIView alloc] init]; view3.backgroundColor = [UIColor yellowColor]; UIView *view4 = [[UIView alloc] init]; view4.backgroundColor = [UIColor grayColor]; UIView *view5 = [[UIView alloc] init]; view5.backgroundColor = [UIColor magentaColor]; [viewPager_ setItemsView:@[view1, view2, view3, view4, view5] withTitle:@[@&amp;quot;第一页面&amp;quot;, @&amp;quot;第二页面&amp;quot;, @&amp;quot;第三页面&amp;quot;, @&amp;quot;第四页面&amp;quot;, @&amp;quot;第五页面&amp;quot;]]; [self.</description>
    </item>
    
    <item>
      <title>根据系统API, 封装二维码扫描(QRCode)</title>
      <link>https://whde.github.io/posts/qrcode/</link>
      <pubDate>Tue, 28 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/qrcode/</guid>
      <description>QRCode 根据系统API, 封装二维码扫描
 1.link AVFoundation.framework
 2.#import 
 3.拷贝以下代码 ```objective-c /*!
 扫一扫 */  (void)intoQRCodeVC { NSString *mediaType = AVMediaTypeVideo; AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:mediaType]; if(authStatus == AVAuthorizationStatusDenied){ if (IS_VAILABLE_IOS8) { UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&amp;ldquo;相机权限受限&amp;rdquo; message:@&amp;ldquo;请在iPhone的\&amp;ldquo;设置-&amp;gt;隐私-&amp;gt;相机\&amp;ldquo;选项中,允许\&amp;ldquo;自游邦\&amp;ldquo;访问您的相机.&amp;rdquo; preferredStyle:UIAlertControllerStyleAlert]; [alert addAction:[UIAlertAction actionWithTitle:@&amp;ldquo;好&amp;rdquo; style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) { }]]; [alert addAction:[UIAlertAction actionWithTitle:@&amp;ldquo;去设置&amp;rdquo; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) { if ([self canOpenSystemSettingView]) { [self systemSettingView]; } }]]; [self presentViewController:alert animated:YES completion:nil]; } else { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&amp;ldquo;相机权限受限&amp;rdquo; message:@&amp;ldquo;请在iPhone的\&amp;ldquo;设置-&amp;gt;隐私-&amp;gt;相机\&amp;ldquo;选项中,允许\&amp;ldquo;自游邦\&amp;ldquo;访问您的相机.</description>
    </item>
    
    <item>
      <title>iOS 表格 WhdeForm</title>
      <link>https://whde.github.io/posts/form/</link>
      <pubDate>Mon, 27 May 2019 19:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/form/</guid>
      <description>WhdeForm iOS 表格
pod &#39;WhdeForm&#39;, &#39;~&amp;gt; 1.0.0&#39;   添加了Reusable机制 添加了横（Section）表头 添加了竖（Column）表头 添加了左上角（TopLeftHeader）总表头 通过FDateSource去创建各个元素，类似TableView 添加了FIndexPath,{section, column} 表头添加点击事件 添加了网格   使用 #import &amp;quot;ViewController.h&amp;quot; #import &amp;quot;FormScrollView.h&amp;quot; @interface ViewController ()&amp;lt;FDelegate, FDataSource&amp;gt; { NSArray *_data; } @end @implementation ViewController - (void)viewDidLoad { [super viewDidLoad]; self.edgesForExtendedLayout = UIRectEdgeNone; self.view.autoresizingMask = UIViewAutoresizingNone; FormScrollView *table = [[FormScrollView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height-64)]; table.contentInset = UIEdgeInsetsMake(0, 0, 0, 0); table.fDelegate = self; table.fDataSource = self; [self.view addSubview:table]; _data = [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&amp;quot;datas&amp;quot; ofType:@&amp;quot;plist&amp;quot;]]; [table reloadData]; } - (FTopLeftHeaderView *)topLeftHeadViewForForm:(FormScrollView *)formScrollView { FTopLeftHeaderView *view = [formScrollView dequeueReusableTopLeftView]; if (view == NULL) { view = [[FTopLeftHeaderView alloc] initWithSectionTitle:@&amp;quot;行数&amp;quot; columnTitle:@&amp;quot;列数&amp;quot;]; } return view; } - (NSInteger)numberOfSection:(FormScrollView *)formScrollView { return _data.</description>
    </item>
    
    <item>
      <title>TextAttachment图文AttributeString</title>
      <link>https://whde.github.io/posts/textattachment/</link>
      <pubDate>Mon, 27 May 2019 16:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/textattachment/</guid>
      <description> TextAttachment 项目介绍 - (void)viewDidLoad { [super viewDidLoad]; NSTextAttachment *textAttachment = [[NSTextAttachment alloc] init]; UIImage *image = [UIImage imageNamed:@&amp;quot;s.png&amp;quot;]; textAttachment.image = image; textAttachment.bounds = CGRectMake(0, 0, image.size.width/image.scale, image.size.height/image.scale); NSMutableAttributedString *attri = [[NSMutableAttributedString alloc] initWithString:@&amp;quot;梅西去了伊比萨高端夜店lio Ibiza。结果在夜店中，梅西偶遇纳达尔。按照TyC电视台的说法，梅西和纳达尔进行了“简单但友好”的对话，并且进行了合影。尽管纳达尔是皇马死忠球迷，但他和梅西仍然惺惺相惜。&amp;quot; attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:40]}]; [attri appendAttributedString:[NSAttributedString attributedStringWithAttachment:textAttachment]]; UILabel *label = [[UILabel alloc] initWithFrame:self.view.bounds]; label.numberOfLines = 0; label.attributedText = attri; [self.view addSubview:label]; }  </description>
    </item>
    
    <item>
      <title>断点下载Swift</title>
      <link>https://whde.github.io/posts/resumefrombreakpoint/</link>
      <pubDate>Mon, 27 May 2019 15:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/resumefrombreakpoint/</guid>
      <description>ResumeFromBreakPoint Swift实现断点续传,Demo简单易懂,没有太多复杂模块和逻辑,完整体现断点续传的原理 https://github.com/whde/BreakPoint 为对应的Objective-C版本
/*Objective-C*/ pod &#39;BreakPoint&#39;, &#39;~&amp;gt; 1.0.1&#39;  WhdeBreakPoint 简单的网络请求队列管理类,简单的管理,不做太多复杂处理
/*创建请求,添加请求到数组中 WhdeSession请求失败,取消请求等需要从数组中移除*/ static func asynDownload(urlStr:NSString, progress:@escaping ProgressBlock, success:@escaping SuccessBlock, failure:@escaping FailureBlock) -&amp;gt;WhdeSession  /*取消请求,移除数组中对应的请求*/ static func cancel(urlStr:String)  /*暂停,即为取消请求*/ static func pause(urlStr:String)  WhdeFileManager 断点续传专用的文件管理
/*根据NSURL获取存储的路径,文件不一定存在 文件名为Url base64转换*/ static func filePath(url:NSURL) -&amp;gt; String  /*获取对应文件的大小*/ static func fileSize(url:NSURL) -&amp;gt; UInt64  /*根据url删除对应的文件*/ static func deleteFile(url:NSURL) -&amp;gt;Bool  WhdeSession 网络收发
/*创建请求,开始下载,设置已经下载的位置*/ func asynDownload(urlStr:NSString, progress:@escaping ProgressBlock, success:@escaping SuccessBlock, failure:@escaping FailureBlock, callCancel:@escaping CallCancel) -&amp;gt;WhdeSession  /*取消下载*/ func cancel() -&amp;gt; Void  /*暂停下载即为取消下载*/ func pause() -&amp;gt; Void  /*出现错误,取消请求,通知失败*/ internal func urlSession(_ session: URLSession, didBecomeInvalidWithError error: Error?</description>
    </item>
    
    <item>
      <title>Lead VPN App for iOS</title>
      <link>https://whde.github.io/posts/lead-ios/</link>
      <pubDate>Mon, 27 May 2019 13:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/lead-ios/</guid>
      <description>Lead   - a featherweight iOS proxy client with interactive UI.
Lead is currently compatible with Shadowsocks.
For more information, see the demo vedio URL.
Todo List Other avaliable proxy types: HTTP HTTPS ShadowsocksR   Usage This project needs an Apple developer account and must be run on a physical device.
 In Terminal,
cd ~/your project path/ pod install carthage update --no-use-binaries --platform ios  In Xcode,</description>
    </item>
    
    <item>
      <title>WhdeAlert</title>
      <link>https://whde.github.io/posts/alert/</link>
      <pubDate>Mon, 27 May 2019 12:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/alert/</guid>
      <description> Alert 消息提醒视图,在Xcode7 ，iOS9.0的SDK中，已经明确提示不再推荐使用UIAlertView，而只能使用UIAlertController; 而系统的样式不能够满足大多UI的需求,因此自定义一个类似UIAlertView; 使用: pod &#39;Alert&#39;, &#39;~&amp;gt; 1.0.4&#39;   5.导入头文件
#import &amp;quot;Alert.h&amp;quot;   6.使用:  Alert *alert = [[Alert alloc] initWithTitle:CLocalizedString(@&amp;quot;输入口令&amp;quot;) message:nil delegate:nil cancelButtonTitle:CLocalizedString(@&amp;quot;取消&amp;quot;) otherButtonTitles:CLocalizedString(@&amp;quot;进入&amp;quot;), nil]; alert.alertStyle = AlertStylePlainTextInput; __block Alert*alertV = alert; [alert setClickBlock:^(Alert *alertView, NSInteger buttonIndex) { if (buttonIndex == 1) { NSLog(@&amp;quot;%@&amp;quot;, alertV.textField.text); } }]; [alert setCancelBlock:^(Alert *alertView) { // 取消 }]; [alert show];   </description>
    </item>
    
    <item>
      <title>iOS消息推送测试</title>
      <link>https://whde.github.io/posts/psuh/</link>
      <pubDate>Mon, 27 May 2019 10:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/psuh/</guid>
      <description> iOS消息推送测试 iOS消息推送测试，Mac App 操作界面，再也不用担心和后台那个坑调试了
- Mac App - iOS推送测试 - 选择推送证书（下载下来的.cer文件） - 填写获取到手机的Device Token - 填写推送的内容 - 点击发送 </description>
    </item>
    
    <item>
      <title>LameFramework 转Mp3</title>
      <link>https://whde.github.io/posts/lame/</link>
      <pubDate>Sun, 26 May 2019 14:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/lame/</guid>
      <description>LameFrameworksh 最新的 iOS 端 Lame生成Framework. 音频转换, Mp3
pod &amp;lsquo;WhdeLame&amp;rsquo;</description>
    </item>
    
    <item>
      <title>ResumeFromBreakPoint断点下载</title>
      <link>https://whde.github.io/posts/breakpoint/</link>
      <pubDate>Sun, 26 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/breakpoint/</guid>
      <description>BreakPoint Objective-C实现断点续传,Demo简单易懂,没有太多复杂模块和逻辑,完整体现断点续传的原理 https://github.com/whde/ResumeFromBreakPoint 为对应的Swift断点续传
WhdeBreakPoint 简单的网络请求队列管理类,简单的管理,不做太多复杂处理
/*创建请求,添加请求到数组中 WhdeSession请求失败,取消请求等需要从数组中移除*/ + (WhdeSession *)asynDownloadWithUrl:(NSString *)urlStr progressBlock:(ProgressBlock)progress successBlock:(SuccessBlock) success failureBlock:(FailureBlock)failure;  /*取消请求,移除数组中对应的请求*/ + (void)cancel:(NSString *)urlStr;  /*暂停,即为取消请求*/ + (void)pause:(NSString *)urlStr;  WhdeFileManager 断点续传专用的文件管理
/*根据NSURL获取存储的路径,文件不一定存在 文件名为Url base64转换*/ + (NSString *)filePath:(NSURL *)url;  /*获取对应文件的大小*/ + (long long)fileSize:(NSURL *)url;  /*根据url删除对应的文件*/ + (BOOL)deleteFile:(NSURL *)url;  WhdeSession 网络收发
/*创建请求,开始下载,设置已经下载的位置*/ + (instancetype)asynDownloadWithUrl:(NSString *)urlStr progressBlock:(ProgressBlock)progress successBlock:(SuccessBlock) success failureBlock:(FailureBlock)failure callCancelBlock:(CallCancel)callCancel;  /*取消下载*/ - (void)cancel;  /*暂停下载即为取消下载*/ - (void)pause;  /*出现错误,取消请求,通知失败*/ - (void)URLSession:(NSURLSession *)session didBecomeInvalidWithError:(NSError *)error;  /*下载完成*/ - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error;  /*接收到数据,将数据存储*/ - (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data { NSHTTPURLResponse *response = (NSHTTPURLResponse *)dataTask.</description>
    </item>
    
    <item>
      <title>Xcode模拟器卸载</title>
      <link>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%8D%B8%E8%BD%BD/</link>
      <pubDate>Sat, 25 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%8D%B8%E8%BD%BD/</guid>
      <description> Xcode模拟器卸载 卸载 模拟器存放在这个文件夹下
/Library/Developer/CoreSimulator/Profiles/Runtimes/  如图：
我们这次删除iOS8.1，直接在Finder（访达）将文件删除 然后重启Xcode，就可以看到效果了 </description>
    </item>
    
    <item>
      <title>Xcode模拟器安装包安装</title>
      <link>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 25 May 2019 11:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85%E5%8C%85%E5%AE%89%E8%A3%85/</guid>
      <description>Xcode模拟器安装包安装 安装（本文以Xcode10.1版本操作）
首先我们先进入Xcode下载文件夹
~/Library/Caches/com.apple.dt.Xcode # 右键-&amp;gt;显示包内容-&amp;gt;Downloads(如果没有Downloads目录, 则手动创建一个)  将我们下载好的模拟器安装包copy到这个Downloads目录，如图：
然后我们回到Xcode操作
点击下载对应的版本，这期间会跳过下载直接去安装
不到一会就安装成功了，如图：</description>
    </item>
    
    <item>
      <title>创建一个类似CocoaPods的Spec</title>
      <link>https://whde.github.io/posts/whdespecs/</link>
      <pubDate>Sat, 25 May 2019 11:12:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/whdespecs/</guid>
      <description> WhdeSpecs 创建一个类似CocoaPods的Spec Repo，然后将自己的组件放到上面，使用CocoaPods就可以帮我们集成这些组件, 本次将Specs放在Gitee上
 ##### 创建自己的Specs  去Gitee上创建一个项目，命名为：WhdeSpecs
cd ~/.cocoapods/repos  进入文件夹
pod repo add WhdeSpecs https://gitee.com/Whde/WhdeSpecs.git  成功之后终端显示
Cloning spec repo &#39;WhdeSpecs&#39; from &#39;https://gitee.com/Whde/WhdeSpecs.git&#39;   按照链接中如何创建发布自己的库介绍配置去配置项目和WhdeVersion.podspec 接下来就是如何提交到我们对应的地方，先进入组件文件夹，执行下面语句  pod repo push WhdeSpecs WhdeVersion.podspec git push origin :refs/tags/2.0.0   ##### 成功之后回到~/.cocoapods/repos文件夹，查看是否已经有   ##### 使用  source &#39;https://gitee.com/Whde/WhdeSpecs.git&#39; platform :ios, &#39;8.0&#39; inhibit_all_warnings! use_frameworks! target &#39;Demo&#39; do pod &#39;WhdeVersion&#39; end  </description>
    </item>
    
    <item>
      <title>获取iOS 设备的 UDID</title>
      <link>https://whde.github.io/posts/udid/</link>
      <pubDate>Sat, 25 May 2019 11:11:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/udid/</guid>
      <description>iOS 设备的 UDID 什么是 UDID？ UDID 是由子母和数字组成的 40 个字符串的序号，用来区别每一个唯一的 iOS 设备，包括 iPhones, iPads, 以及 iPod Touches，这些编码看起来是随机的，实际上是跟硬件设备特点相联系的。
如何获取 iOS 设备 UDID？
在 iOS 设备上打开下面的地址，即可方便的获取到当前设备的 UDID。
https://www.pgyer.com/udid
注意：请根据网页的提示，安装蒲公英提供的描述文件。如果手机设置了锁屏密码，则需要根据提示输入锁屏密码。
复制UDID，给开发工程师
PS： ​ 这个过程安装了一个蒲公英的描述文件，在拿到UDID之后，我们可以在手机上删掉它，描述文件路径： ​ 设置-&amp;gt;通用-&amp;gt;描述文件-&amp;gt;蒲公英</description>
    </item>
    
    <item>
      <title>获取Xcode模拟器下载地址</title>
      <link>https://whde.github.io/posts/%E8%8E%B7%E5%8F%96xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Sat, 25 May 2019 10:43:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/%E8%8E%B7%E5%8F%96xcode%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</guid>
      <description> 获取Xcode模拟器下载地址 终端操作，期间需要输入电脑密码 sudo /Applications/Xcode.app/Contents/MacOS/Xcode  然后会自动打开Xcode，然后在Xcode里点击下载对应的模拟器，例如我下载iOS12（如图） 如上图那样，我们接着点击右边的x停止下载 接着我们回到终端，就会显示出模拟器的地址（如图） </description>
    </item>
    
    <item>
      <title>Package</title>
      <link>https://whde.github.io/posts/package/</link>
      <pubDate>Thu, 14 Dec 2017 11:18:15 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/package/</guid>
      <description>iOS脚本打包 使用方法 1 : 项目主目录下创建 Package 文件夹, 将Package_test.sh DevelopmentExportOptionsPlist.plist放进文件下 2 : 打开Package_test.sh文件,修改 &amp;ldquo;项目自定义部分&amp;rdquo; 配置好项目参数 3 : 打开DevelopmentExportOptionsPlist.plist, 配置provisioningProfiles字段 4 : 打开终端, cd到Package文件夹 5 : 输入 sh Package_test.sh 命令,回车,开始执行此打包脚本
DevelopmentExportOptionsPlist.plist 文件下载地址：
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;compileBitcode&amp;lt;/key&amp;gt; &amp;lt;false/&amp;gt; &amp;lt;key&amp;gt;method&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;development&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;provisioningProfiles&amp;lt;/key&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;com.Whde.WhdeProjectName&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;Wildcard&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;key&amp;gt;signingCertificate&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;iPhone Developer&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;signingStyle&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;manual&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;stripSwiftSymbols&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;teamID&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;BVU65MZFLK&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;thinning&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;&amp;amp;lt;none&amp;amp;gt;&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt;  Package_test.sh 文件下载地址：
# !</description>
    </item>
    
  </channel>
</rss>