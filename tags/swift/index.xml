<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Whde</title>
    <link>https://whde.github.io/tags/swift/</link>
    <description>Recent content in Swift on Whde</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 27 May 2019 15:13:49 +0800</lastBuildDate>
    
	<atom:link href="https://whde.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>断点下载Swift</title>
      <link>https://whde.github.io/posts/resumefrombreakpoint/</link>
      <pubDate>Mon, 27 May 2019 15:13:49 +0800</pubDate>
      
      <guid>https://whde.github.io/posts/resumefrombreakpoint/</guid>
      <description>ResumeFromBreakPoint Swift实现断点续传,Demo简单易懂,没有太多复杂模块和逻辑,完整体现断点续传的原理 https://github.com/whde/BreakPoint 为对应的Objective-C版本
/*Objective-C*/ pod &#39;BreakPoint&#39;, &#39;~&amp;gt; 1.0.1&#39;  WhdeBreakPoint 简单的网络请求队列管理类,简单的管理,不做太多复杂处理
/*创建请求,添加请求到数组中 WhdeSession请求失败,取消请求等需要从数组中移除*/ static func asynDownload(urlStr:NSString, progress:@escaping ProgressBlock, success:@escaping SuccessBlock, failure:@escaping FailureBlock) -&amp;gt;WhdeSession  /*取消请求,移除数组中对应的请求*/ static func cancel(urlStr:String)  /*暂停,即为取消请求*/ static func pause(urlStr:String)  WhdeFileManager 断点续传专用的文件管理
/*根据NSURL获取存储的路径,文件不一定存在 文件名为Url base64转换*/ static func filePath(url:NSURL) -&amp;gt; String  /*获取对应文件的大小*/ static func fileSize(url:NSURL) -&amp;gt; UInt64  /*根据url删除对应的文件*/ static func deleteFile(url:NSURL) -&amp;gt;Bool  WhdeSession 网络收发
/*创建请求,开始下载,设置已经下载的位置*/ func asynDownload(urlStr:NSString, progress:@escaping ProgressBlock, success:@escaping SuccessBlock, failure:@escaping FailureBlock, callCancel:@escaping CallCancel) -&amp;gt;WhdeSession  /*取消下载*/ func cancel() -&amp;gt; Void  /*暂停下载即为取消下载*/ func pause() -&amp;gt; Void  /*出现错误,取消请求,通知失败*/ internal func urlSession(_ session: URLSession, didBecomeInvalidWithError error: Error?</description>
    </item>
    
  </channel>
</rss>